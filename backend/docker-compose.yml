name: 'jbook-backend-container'
services:

  front-end-app:
    build: ..frontend/jbook-app/Dockerfile
  # Eureka Server
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - microservices-network
    depends_on:
      - gateway-service
  # PostgreSQL for user-service
  postgres_user_service:
    image: postgres:14
    container_name: postgres_user_service_db
    environment:
      POSTGRES_DB: user_service_db
      POSTGRES_USER: user_service_user
      POSTGRES_PASSWORD: complexpassword
    ports:
      - "5432:5432" # Expose this on 5432 for user-service
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  # PostgreSQL for book-service
  postgres_book_service:
    image: postgres:14
    container_name: postgres_book_service_db
    environment:
      POSTGRES_DB: book_service_db
      POSTGRES_USER: book_service_user
      POSTGRES_PASSWORD: complexpassword
    ports:
      - "5433:5432" # Expose this on 5433 for book-service
    volumes:
      - postgres_book_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  # Adminer for managing the databases
  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "8080:8080" # Adminer will be available on port 8080
    networks:
      - microservices-network

  # user-service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    depends_on:
      - postgres_user_service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_user_service:5432/user_service_db
      SPRING_DATASOURCE_USERNAME: user_service_user
      SPRING_DATASOURCE_PASSWORD: complexpassword
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    ports:
      - "8081:8081" # Expose user-service on port 8081
    networks:
      - microservices-network
    links:
      - postgres_user_service

  # book-service
  book-service:
    build:
      context: ./book-service
      dockerfile: Dockerfile
    container_name: book-service
    depends_on:
      - postgres_book_service
      - user-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_book_service:5432/book_service_db
      SPRING_DATASOURCE_USERNAME: book_service_user
      SPRING_DATASOURCE_PASSWORD: complexpassword
      BOOKSERVICE_API_KEY: your-secure-api-key # API key for communicating with user-service
      USER_SERVICE_URL: http://user-service:8081 # User-service URL
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    ports:
      - "8082:8082" # Expose book-service on port 8082
    networks:
      - microservices-network
    links:
      - postgres_book_service
      - user-service
  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    networks:
      - microservices-network
    depends_on:
      - user-service
      - book-service
    links:
      - user-service
      - book-service

volumes:
  postgres_user_data:
  postgres_book_data:


networks:
  microservices-network:
    driver: bridge
